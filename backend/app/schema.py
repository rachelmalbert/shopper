from datetime import datetime, date
from typing import  Optional, Union
from pydantic import BaseModel
from sqlmodel import Relationship, Field, SQLModel

# ------------------------------------- #
#            Database Models            #
# ------------------------------------- #

class UserInDB(SQLModel, table=True):
    """User in the database"""

    __tablename__ = "users"

    id: Optional[int] = Field(default=None, primary_key=True) # value of id will be None until saved in the database (where it will be generated by the database)
    username: str = Field(unique=True)
    hashed_password: Optional[str] = None

class AddressInDB(SQLModel, table=True):
    """Address in the database """

    __tablename__ = "addresses"

    id: Optional[int] = Field(default=None, primary_key=True) # value of id will be None until saved in the database (where it will be generated by the database)
    user_id: int = Field(foreign_key="users.id")
    name: str = None
    address: str = None
    city: str = None
    state: str = None
    zip: int = None


# ------------------------------------- #
#            Request Models             #
# ------------------------------------- #

class UserRegistrationRequest(BaseModel):
    """Request model for user registraion info"""
    username: str
    password: str

class AddressRequest(BaseModel):
    """Request model for creating an address"""
    name: str
    address: str
    city: str
    state: str
    zip: int



